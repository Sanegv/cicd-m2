# .github/workflows/ci-cd.yml

name: CI/CD Pipeline

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Frontend Dependencies
        run: npm install
        working-directory: frontend
        
      - name: Install Backend Dependencies
        run: pip install -r requirements.txt
        working-directory: backend
        
      - name: Run Frontend Tests
        run: npm test
        working-directory: frontend
        
      - name: Run Backend Tests
        run: pytest --cov=. --cov-report=xml
        working-directory: backend
        
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
            
      - name: Login to Container Registry
        run: |
          az acr login --name ${{ secrets.REGISTRY_NAME }}
          
      - name: Build and Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.REGISTRY_NAME }}.azurecr.io/frontend:${{ github.sha }}
          
      - name: Build and Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.REGISTRY_NAME }}.azurecr.io/backend:${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    environment: staging
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
            
      - name: Deploy Frontend to Staging
        run: |
          az webapp config container set \
            --name ${{ secrets.FRONTEND_APP_NAME }}-staging \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --docker-custom-image-name ${{ secrets.REGISTRY_NAME }}.azurecr.io/frontend:${{ github.sha }}
            
      - name: Deploy Backend to Staging
        run: |
          az webapp config container set \
            --name ${{ secrets.BACKEND_APP_NAME }}-staging \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --docker-custom-image-name ${{ secrets.REGISTRY_NAME }}.azurecr.io/backend:${{ github.sha }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
            
      - name: Deploy Frontend to Production
        run: |
          az webapp config container set \
            --name ${{ secrets.FRONTEND_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --docker-custom-image-name ${{ secrets.REGISTRY_NAME }}.azurecr.io/frontend:${{ github.sha }}
            
      - name: Deploy Backend to Production
        run: |
          az webapp config container set \
            --name ${{ secrets.BACKEND_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --docker-custom-image-name ${{ secrets.REGISTRY_NAME }}.azurecr.io/backend:${{ github.sha }}
            
      - name: Run Health Check
        run: |
          sleep 30
          curl -f https://${{ secrets.BACKEND_APP_NAME }}.azurewebsites.net/health || exit 1

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Playwright
        run: |
          npm install -g @playwright/test
          npx playwright install
          
      - name: Run E2E Tests
        run: npx playwright test
        env:
          BASE_URL: https://${{ secrets.FRONTEND_APP_NAME }}-staging.azurewebsites.net
